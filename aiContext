#!/bin/bash

# Functions

is_git_repository() {
  git rev-parse --is-inside-work-tree >/dev/null 2>&1
}

get_install_instructions() {
  case "$(uname -s)" in
    Linux*)     echo "Please install $1 using 'sudo apt-get install $1' or the appropriate package manager for your system." ;;
    Darwin*)    echo "Please install $1 using 'brew install $1' or the appropriate package manager for your system." ;;
    CYGWIN*|MINGW*|MSYS*) echo "Please install $1 using 'scoop install $1' or the appropriate package manager for your system." ;;
    *)          echo "Please install $1 using the appropriate package manager for your system." ;;
  esac
}

check_dependency() {
  if ! command -v $1 >/dev/null; then
    echo "Error: $1 is not installed."
    instructions=$(get_install_instructions "$1")
    echo "$instructions"
    exit 1
  fi
}

get_prompt() {
  flag=$1
  prompt_flags_json=$(curl -sS "https://raw.githubusercontent.com/robrien20/aiContext/master/prompt_flags.json")
  echo "$prompt_flags_json" | jq -r --arg flag "$flag" '.[] | select(.flag == $flag) | .prompt'
}


get_vcs_info() {
  if [ -d ".git" ]; then
    echo -e "\nVersion Control Information (Git):"
    echo "Current Branch:"
    git symbolic-ref --short HEAD

    echo -e "\nCommit History:"
    git log --oneline -n 5

    echo -e "\nUncommitted Changes:"
    git status --short
  else
    echo -e "\nVersion Control Information:"
    echo "No Git repository detected."
  fi
}

# Function to generate output
generate_output() {
  # curl for the latest list of prompts and their associated flag, and decide on prompt based on flags  

    user_flag="$1" # Or, retrieve the flag from the user in a different way
    prompt=$(get_prompt "$user_flag")
    echo "$prompt"


  
  # Output README.md (if exists)
  if [ -f "README.md" ]; then
    echo -e "\nREADME.md Content:"
    cat README.md
  fi

  # Output preferences.md (if exists)
  if [ -f "preferences.md" ]; then
    echo -e "\nPreferences:"
    cat preferences.md
  fi

  # Output package.json (if exists)
  if [ -f "package.json" ]; then
    echo -e "\nPackage Information:"
    cat package.json | jq
  fi

  # Output requirements.txt (if exists)
  if [ -f "requirements.txt" ]; then
    echo -e "\nPython Dependencies:"
    cat requirements.txt
  fi

  # Output project directory
    echo -e "\nProject Directory:"
  tree -J -o tree.json --noreport .
  python3_code=$(cat <<'EOF'
import os
import json
from pathspec import PathSpec
from pathspec.patterns import GitWildMatchPattern

def get_gitignore_spec():
    if os.path.exists('.gitignore'):
        with open('.gitignore', 'r') as f:
            gitignore_lines = f.read().splitlines()
        return PathSpec.from_lines(GitWildMatchPattern, gitignore_lines)
    return None

def is_ignored(gitignore_spec, root, path):
    relative_path = os.path.relpath(path, root)
    return (
        ".git/" in relative_path or
        (gitignore_spec and gitignore_spec.match_file(relative_path))
    )

def get_directory_contents(root, gitignore_spec):
    contents = {}
    entries = list(os.scandir(root))

    for entry in entries:
        path = os.path.join(root, entry.name)
        if not is_ignored(gitignore_spec, ".", path):
            if entry.is_dir():
                contents[entry.name] = get_directory_contents(path, gitignore_spec)
            else:
                contents[entry.name] = {}

    return contents

if __name__ == "__main__":
    gitignore_spec = get_gitignore_spec()
    directory_contents = get_directory_contents(".", gitignore_spec)
    print(json.dumps(directory_contents, indent=2))


EOF
)
  echo "$python3_code" | python3 - tree.json
  rm tree.json

  # Add the version control information
  get_vcs_info
}

copy_to_clipboard() {
  if command -v xclip >/dev/null; then
    echo -e "$1" | xclip -selection clipboard
  elif command -v pbcopy >/dev/null; then
    echo -e "$1" | pbcopy
  elif command -v clip >/dev/null; then
    echo -e "$1" | clip
  else
    echo -e "\nNote: Unable to automatically copy the output to the clipboard."
    case "$(uname -s)" in
      Linux*) echo -e "\033[0;33mPlease install 'xclip' using 'sudo apt-get install xclip' or the appropriate package manager for your system.\033[0m" ;;
      Darwin*) echo -e "\033[0;33mPlease install 'pbcopy' using the appropriate package manager for your system.\033[0m" ;;
      CYGWIN*|MINGW*|MSYS*) echo -e "\033[0;33mPlease use 'clip' on Windows.\033[0m" ;;
      *) echo -e "\033[0;33mPlease install the appropriate clipboard utility for your system.\033[0m" ;;
    esac
  fi
}

# Check if the current directory is a git repository
if ! is_git_repository; then
  echo -e "\033[1;31mWarning: This script should be run from a git repository.\033[0m"
  exit 1
fi

# Check dependencies
check_dependency "jq"
check_dependency "tree"

# Use the first command-line argument as the user flag
user_flag="$1"

# Generate and print output
output=$(generate_output "$user_flag")
echo -e "$output"

# Copy output to clipboard
copy_to_clipboard "$output"
echo -e "\033[1;32mOutput has been copied to clipboard\033[0m"